//===-- YCoreISelDAGToDAG.cpp - A dag to dag inst selector for YCore ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the YCore target.
//
//===----------------------------------------------------------------------===//

#include "YCore.h"
#include "YCoreTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/IntrinsicsYCore.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

/// YCoreDAGToDAGISel - YCore specific code to select YCore machine
/// instructions for SelectionDAG operations.
///
namespace {
  class YCoreDAGToDAGISel : public SelectionDAGISel {

  public:
    YCoreDAGToDAGISel(YCoreTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

    void Select(SDNode *N) override;

    bool SelectADDRspii(SDValue Addr, SDValue &Base, SDValue &Offset);

//    bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
//                                      std::vector<SDValue> &OutOps) override;

    StringRef getPassName() const override {
      return "YCore DAG->DAG Pattern Instruction Selection";
    }

    // Include the pieces autogenerated from the target description.
  #include "YCoreGenDAGISel.inc"
  };
}  // end anonymous namespace

/// createYCoreISelDag - This pass converts a legalized DAG into a
/// YCore-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createYCoreISelDag(YCoreTargetMachine &TM,
                                       CodeGenOpt::Level OptLevel) {
  return new YCoreDAGToDAGISel(TM, OptLevel);
}

bool YCoreDAGToDAGISel::SelectADDRspii(SDValue Addr, SDValue &Base,
                                       SDValue &Offset) {
  FrameIndexSDNode *FIN = nullptr;
  if ((FIN = dyn_cast<FrameIndexSDNode>(Addr))) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
    return true;
  }
}

void YCoreDAGToDAGISel::Select(SDNode *N) {
  SDLoc dl(N);
  SelectCode(N);
}
